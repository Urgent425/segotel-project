from flask import Blueprint, render_template, redirect, url_for, request, flash, session
import requests

ticket_bp = Blueprint('ticket', __name__)

API_URL = 'http://127.0.0.1:5000/api/v1/tickets'

# View all tickets
@ticket_bp.route('/dashboard', methods=['GET'])
def dashboard():
    token = session.get('access_token')
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.get(f"{API_URL}", headers=headers)
    
    if response.status_code == 200:
        tickets = response.json()
        customer_data = response.json()
        return render_template('ticket_dashboard.html', customer=customer_data, tickets=tickets)
    else:
        flash('Failed to load tickets. Please log in.', 'error')
        return redirect(url_for('customer.login'))

# Create a new ticket
@ticket_bp.route('/create', methods=['POST'])
def create_ticket():
    token = session.get('access_token')
    headers = {'Authorization': f'Bearer {token}'}
    
    title = request.form['title']
    description = request.form['description']
    #customer_id = request.form['customer_id']

    response = requests.post(f"{API_URL}/create", json={
        'title': title,
        'description': description,
        #'customer_id': customer_id
    }, headers=headers)

    if response.status_code == 201:
        flash('Ticket created successfully!', 'success')
    else:
        flash('Failed to create ticket.', 'error')

    return redirect(url_for('ticket.dashboard'))

# View ticket details
@ticket_bp.route('/view/<int:ticket_id>', methods=['GET'])
def view_ticket(ticket_id):
    token = session.get('access_token')
    headers = {'Authorization': f'Bearer {token}'}
    
    response = requests.get(f"{API_URL}/{ticket_id}", headers=headers)
    
    if response.status_code == 200:
        ticket = response.json()
        return render_template('ticket_view.html', ticket=ticket)
    else:
        flash('Failed to retrieve ticket.', 'error')
        return redirect(url_for('ticket.dashboard'))

# Update a ticket
@ticket_bp.route('/update/<int:ticket_id>', methods=['POST'])
def update_ticket(ticket_id):
    token = session.get('access_token')
    headers = {'Authorization': f'Bearer {token}'}
    
    title = request.form['title']
    description = request.form['description']
    status = request.form['status']
    priority = request.form['priority']

    response = requests.put(f"{API_URL}/update/{ticket_id}", json={
        'title': title,
        'description': description,
        'status': status,
        'priority': priority
    }, headers=headers)

    if response.status_code == 200:
        flash('Ticket updated successfully!', 'success')
    else:
        flash('Failed to update ticket.', 'error')

    return redirect(url_for('ticket.dashboard'))

# Delete a ticket
@ticket_bp.route('/delete/<int:ticket_id>', methods=['POST'])
def delete_ticket(ticket_id):
    token = session.get('access_token')
    headers = {'Authorization': f'Bearer {token}'}
    
    response = requests.delete(f"{API_URL}/delete/{ticket_id}", headers=headers)

    if response.status_code == 204:
        flash('Ticket deleted successfully!', 'success')
    else:
        flash('Failed to delete ticket.', 'error')

    return redirect(url_for('ticket.dashboard'))
