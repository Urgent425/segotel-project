from flask import Blueprint, render_template, redirect, url_for, request, flash, session
import requests

# Create a Blueprint for base routes
base_bp = Blueprint('base', __name__)

# Home route
@base_bp.route('/')
def home():
    return render_template('base.html')  # This will inherit from base.html


# Create a Blueprint for customer-related routes
web_customer_bp = Blueprint('customer', __name__)

# Define the base API URL for customer endpoints (adapt based on your API setup)
API_URL = 'http://127.0.0.1:5000/api/v1/customers'  # Example API URL

# Customer Registration Route
@web_customer_bp.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        # Capture form data from registration page
        name = request.form['name']
        email = request.form['email']
        password = request.form['password']
        
        # Make a POST request to the API to register the customer
        response = requests.post(f"{API_URL}/register", json={
            'name': name,
            'email': email,
            'password': password
        })

        if response.status_code == 201:
            # On success, show a flash message with the generated API key
            flash(f"Customer registered successfully! API Key: {response.json().get('api_key')}", 'success')
            return redirect(url_for('customer.login'))
        else:
            # Handle registration failure
            flash('Registration failed. Please try again.', 'error')
    
    return render_template('register.html')

# Customer Login Route
@web_customer_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # Capture login form data
        email = request.form['email']
        password = request.form['password']
        
        # Make a POST request to the API for login
        response = requests.post(f"{API_URL}/login", json={
            'email': email,
            'password': password
        })

        if response.status_code == 200:
            # On success, store the JWT token in the session and redirect to profile
            session['access_token'] = response.json().get('access_token')
            session['customer_id'] = response.json().get('customer_id')  # Save customer ID
            flash(f"Token access: {response.json().get('access_token')}", 'success')
            return redirect(url_for('customer.profile'))
        else:
            # Handle login failure
            flash('Invalid credentials. Please try again.', 'error')
    
    return render_template('login.html')

# Customer Profile Route
@web_customer_bp.route('/profile', methods=['GET'])
def profile():
    # Get the JWT token from session
    token = session.get('access_token')
    
    # Make a GET request to the API to retrieve the customer's profile
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.get(f"{API_URL}/profile", headers=headers)
    
    if response.status_code == 200:
        # Render profile page with customer data
        customer_data = response.json()
        return render_template('profile.html', customer=customer_data, token=token)
    else:
        flash('Failed to retrieve profile. Please log in again.', 'error')
        return redirect(url_for('customer.login'))

# API Key Management Route (View and Generate)
# @web_customer_bp.route('/api-keys', methods=['GET'])
# def api_keys():
#     # Get the JWT token from session
#     token = session.get('access_token')

#     # Make a GET request to the API to retrieve the API keys
#     headers = {'Authorization': f'Bearer {token}'}
#     response = requests.get(f"{API_URL}/api_key", headers=headers)

#     if response.status_code == 200:
#         # Render API keys management page with the keys
#         api_keys_data = response.json()
#         return render_template('api_keys.html', api_keys=api_keys_data)
#     else:
#         flash('Failed to retrieve API keys. Please log in again.', 'error')
#         return redirect(url_for('customer.login'))

# Route to Generate a New API Key
@web_customer_bp.route('/api_keys/generate', methods=['POST'])
def generate_api_key():
    # Get the JWT token from session
    token = session.get('access_token')

    # Make a POST request to the API to generate a new API key
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.post(f"{API_URL}/api_key/generate", headers=headers)

    if response.status_code == 200:
        flash(f"New API key generated: {response.json().get('api_key')}", 'success')
    else:
        flash('Failed to generate new API key. Please log in again', 'error')
        return redirect(url_for('customer.login'))
    return redirect(url_for('customer.profile'))

# Route to Deactivate an API Key
@web_customer_bp.route('/api-keys/deactivate/<int:api_key_id>', methods=['POST'])
def deactivate_api_key(api_key_id):
    # Get the JWT token from session
    token = session.get('access_token')

    # Make a POST request to the API to deactivate the API key
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.post(f"{API_URL}/deactivate-api-key/{api_key_id}", headers=headers)

    if response.status_code == 200:
        flash('API key deactivated successfully.', 'success')
    else:
        flash('Failed to deactivate API key.', 'error')

    return redirect(url_for('customer.api_keys'))


# Fetch customer or employee services
@web_customer_bp.route('/services')
def services():
    token = session.get('access_token')
    headers = {'Authorization': f'Bearer {token}'}

    response = requests.get(f"{API_URL}/services/dashboard", headers=headers)

    if response.status_code == 200:
        data = response.json()

        # Check user role from JWT token and render the appropriate template
        role = session.get('role')  # Store role in session during login
        if role == 'customer':
            return render_template('customer_services.html', services=data['services'])
        elif role == 'employee':
            return render_template('employee_services.html', services=data['services'])
    else:
        flash('Failed to retrieve services.', 'error')
        return redirect(url_for('customer.login'))


@web_customer_bp.route('/billing')
def billing():
    return redirect(url_for('customer.profile'))
   
    # Similar logic as services to fetch billing data

@web_customer_bp.route('/tickets')
def tickets():
    return redirect(url_for('customer.profile'))
    # Similar logic as services to fetch tickets