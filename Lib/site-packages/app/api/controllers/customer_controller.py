from flask import jsonify, request
from app.api.models.customer import Customer
from app.api.models.customer_api_key import CustomerAPIKey
from app.api import db, bcrypt
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity
import secrets

# Helper function to generate API keys
def generate_api_key():
    return secrets.token_urlsafe(32)

# Register customer and generate API key
def register_customer():
    data = request.get_json()

    # Hash the password
    hashed_password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
    
    # Create new customer
    new_customer = Customer(name=data['name'], email=data['email'], password=hashed_password)
    
    # Add the customer to the database
    db.session.add(new_customer)
    db.session.commit()
    
    # Generate API key for the new customer
    api_key = CustomerAPIKey(api_key=generate_api_key(), customer_id=new_customer.id)
    
    db.session.add(api_key)
    db.session.commit()
    
    return jsonify({
        'message': 'Customer registered successfully',
        'api_key': api_key.api_key  # Return the generated API key
    }), 201

# Customer login (returns JWT token)
def customer_login():
    data = request.get_json()

    # Check if customer exists and validate password
    customer = Customer.query.filter_by(email=data['email']).first()

    if customer and bcrypt.check_password_hash(customer.password, data['password']):
        # Create a JWT token for authentication
        access_token = create_access_token(identity={'email': customer.email})
        return jsonify({'access_token': access_token}), 200

    return jsonify({'error': 'Invalid credentials'}), 401

# Generate a new API key for the customer
@jwt_required()
def generate_customer_api_key():
    customer_email = get_jwt_identity()['email']
    customer = Customer.query.filter_by(email=customer_email).first()

    if not customer:
        return jsonify({'error': 'Customer not found'}), 404

    # Generate a new API key for the customer
    new_api_key = CustomerAPIKey(api_key=generate_api_key(), customer_id=customer.id)
    
    # Save the new API key in the database
    db.session.add(new_api_key)
    db.session.commit()

    return jsonify({
        'message': 'API key generated successfully',
        'api_key': new_api_key.api_key
    }), 200

# View customer profile (including API keys)
@jwt_required()
def view_customer_profile():
    customer_email = get_jwt_identity()['email']
    customer = Customer.query.filter_by(email=customer_email).first()

    if not customer:
        return jsonify({'error': 'Customer not found'}), 404

    return jsonify(customer.to_dict()), 200

# Deactivate an API key for the customer
@jwt_required()
def deactivate_customer_api_key(api_key_id):
    # Get the active API key by its ID
    api_key = CustomerAPIKey.query.filter_by(id=api_key_id, is_active=True).first()

    if not api_key:
        return jsonify({'error': 'API key not found or already deactivated'}), 404

    # Deactivate the API key
    api_key.is_active = False
    db.session.commit()

    return jsonify({'message': 'API key deactivated successfully'}), 200
