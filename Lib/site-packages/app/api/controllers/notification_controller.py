# app/controllers/notification_controller.py
from flask import request, jsonify
from app.api.models.notification import Notification
from app.api import db
from datetime import datetime

# Create a new notification
def create_notification():
    data = request.get_json()

    if not data or not data.get('recipient') or not data.get('message') or not data.get('notification_type'):
        return jsonify({"error": "Missing data"}), 400
    
    notification = Notification(
        recipient=data['recipient'],
        message=data['message'],
        notification_type=data['notification_type'],
        status='pending',
        scheduled_at=data.get('scheduled_at', None)
    )
    
    db.session.add(notification)
    db.session.commit()
    
    return jsonify(notification.to_dict()), 201

# Get all notifications
def get_all_notifications():
    notifications = Notification.query.all()
    return jsonify([notification.to_dict() for notification in notifications]), 200

# Get a notification by ID
def get_notification_by_id(notification_id):
    notification = Notification.query.get(notification_id)
    if notification is None:
        return jsonify({"error": "Notification not found"}), 404
    return jsonify(notification.to_dict()), 200

# Update a notification (e.g., reschedule or edit details)
def update_notification(notification_id):
    notification = Notification.query.get(notification_id)
    if notification is None:
        return jsonify({"error": "Notification not found"}), 404
    
    data = request.get_json()
    notification.recipient = data.get('recipient', notification.recipient)
    notification.message = data.get('message', notification.message)
    notification.notification_type = data.get('notification_type', notification.notification_type)
    notification.scheduled_at = data.get('scheduled_at', notification.scheduled_at)
    notification.status = data.get('status', notification.status)
    
    db.session.commit()
    
    return jsonify(notification.to_dict()), 200

# Delete a notification
def delete_notification(notification_id):
    notification = Notification.query.get(notification_id)
    if notification is None:
        return jsonify({"error": "Notification not found"}), 404
    
    db.session.delete(notification)
    db.session.commit()
    
    return '', 204

# Send a notification (mock function for sending notifications)
def send_notification(notification_id):
    notification = Notification.query.get(notification_id)
    if notification is None:
        return jsonify({"error": "Notification not found"}), 404
    
    # Logic to send notification (via email, SMS, etc.)
    # For now, we mock sending by updating the status
    notification.status = 'sent'
    notification.sent_at = datetime.utcnow()
    db.session.commit()
    
    return jsonify({"message": "Notification sent", "notification": notification.to_dict()}), 200
