# app/controllers/ticket_controller.py
from flask import request, jsonify, session
from app.api.models.ticket import Ticket
from app.api.models.customer import Customer
from app.api.models.employee import Employee
from app.api import db

# Create a new ticket
def create_ticket():

    data = request.get_json()

    # Retrieve the customer_id from the session
    customer_id = session.get('customer_id')  # Assuming you store customer_id in session
    if not customer_id:
        return jsonify({"error": "Customer not logged in"}), 401

    title = data.get('title')
    description = data.get('description')

    if not title or not description:
        return jsonify({"error": "Missing required data"}), 400

    new_ticket = Ticket(customer_id=customer_id, title=title, description=description)
    db.session.add(new_ticket)
    db.session.commit()

    return jsonify(new_ticket.to_dict()), 201

# Get all tickets
def get_all_tickets():
    tickets = Ticket.query.all()
    return jsonify([ticket.to_dict() for ticket in tickets]), 200

# Get a ticket by ID
def get_ticket_by_id(ticket_id):
    ticket = Ticket.query.get(ticket_id)
    if ticket is None:
        return jsonify({"error": "Ticket not found"}), 404
    return jsonify(ticket.to_dict()), 200

# Update a ticket
def update_ticket(ticket_id):
    ticket = Ticket.query.get(ticket_id)
    if ticket is None:
        return jsonify({"error": "Ticket not found"}), 404

    data = request.get_json()
    ticket.title = data.get('title', ticket.title)
    ticket.description = data.get('description', ticket.description)
    ticket.status = data.get('status', ticket.status)
    ticket.priority = data.get('priority', ticket.priority)

    db.session.commit()
    return jsonify(ticket.to_dict()), 200

# Delete a ticket
def delete_ticket(ticket_id):
    ticket = Ticket.query.get(ticket_id)
    if ticket is None:
        return jsonify({"error": "Ticket not found"}), 404

    db.session.delete(ticket)
    db.session.commit()
    return '', 204

# Assign an employee to a ticket
def assign_employee_to_ticket(ticket_id, employee_id):
    ticket = Ticket.query.get(ticket_id)
    employee = Employee.query.get(employee_id)

    if ticket is None:
        return jsonify({"error": "Ticket not found"}), 404
    if employee is None:
        return jsonify({"error": "Employee not found"}), 404

    ticket.employee_id = employee_id
    db.session.commit()

    return jsonify({"message": "Employee assigned to ticket successfully."}), 200
