from flask import Blueprint, request, jsonify
from app.api.models.customer import Customer
from app import db

customer_bp = Blueprint('customers', __name__)

# Create a new customer
@customer_bp.route('', methods=['POST'])
def create_customer():
    data = request.get_json()
    name = data.get('name')
    email = data.get('email')

    # Validation for name and email
    if not name or not email:
        return jsonify({'error': 'Name and email are required'}), 400

    # Check if customer already exists
    existing_customer = Customer.query.filter_by(email=email).first()
    if existing_customer:
        return jsonify({'error': 'Customer already exists'}), 400

    # Create new customer
    new_customer = Customer(name=name, email=email)
    db.session.add(new_customer)
    db.session.commit()

    return jsonify({'message': 'Customer created successfully', 'customer': {'id': new_customer.id, 'name': new_customer.name, 'email': new_customer.email}}), 201

# Get all customers
@customer_bp.route('/', methods=['GET'])
def get_all_customers():
    customers = Customer.query.all()
    customer_list = [{'id': customer.id, 'name': customer.name, 'email': customer.email} for customer in customers]
    
    return jsonify(customer_list), 200

# Get a customer by ID
@customer_bp.route('/<int:customer_id>', methods=['GET'])
def get_customer_by_id(customer_id):
    customer = Customer.query.get(customer_id)
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404

    return jsonify({'id': customer.id, 'name': customer.name, 'email': customer.email}), 200

# Update a customer
@customer_bp.route('/<int:customer_id>', methods=['PUT'])
def update_customer(customer_id):
    customer = Customer.query.get(customer_id)
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404

    data = request.get_json()
    customer.name = data.get('name', customer.name)
    customer.email = data.get('email', customer.email)

    db.session.commit()

    return jsonify({'message': 'Customer updated successfully', 'customer': {'id': customer.id, 'name': customer.name, 'email': customer.email}}), 200

# Delete a customer
@customer_bp.route('/<int:customer_id>', methods=['DELETE'])
def delete_customer(customer_id):
    customer = Customer.query.get(customer_id)
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404

    db.session.delete(customer)
    db.session.commit()

    return jsonify({'message': 'Customer deleted successfully'}), 200
