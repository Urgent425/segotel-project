import unittest
from app import create_app, db
from app.models.customer import Customer
import json

class CustomerAPITestCase(unittest.TestCase):

    def setUp(self):
        """Set up the test environment."""
        self.app = create_app()
        self.client = self.app.test_client()
        self.app.config['TESTING'] = True
        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'  # Use in-memory database for tests
        with self.app.app_context():
            db.create_all()

    def tearDown(self):
        """Clean up the database after each test."""
        with self.app.app_context():
            db.session.remove()
            db.drop_all()

    def test_create_customer(self):
        """Test creating a new customer."""
        response = self.client.post('/api/customers', 
                                    data=json.dumps({'name': 'John Doe', 'email': 'john@example.com'}),
                                    content_type='application/json')
        self.assertEqual(response.status_code, 201)
        self.assertIn('John Doe', response.get_data(as_text=True))

    def test_get_customers(self):
        """Test getting all customers."""
        # First, add a customer directly to the database
        with self.app.app_context():
            customer = Customer(name="John Doe", email="john@example.com")
            db.session.add(customer)
            db.session.commit()

        # Now check if the API returns this customer
        response = self.client.get('/api/customers')
        self.assertEqual(response.status_code, 200)
        self.assertIn('John Doe', response.get_data(as_text=True))

if __name__ == '__main__':
    unittest.main()
    